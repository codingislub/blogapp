name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, production ]
  pull_request:
    branches: [ main, production ]

env:
  NODE_VERSION: '18'

jobs:
  # Lint and Test Job
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Temporarily disable npm cache to avoid dependency issues

      - name: Clear npm cache and install dependencies
        run: |
          npm cache clean --force
          npm ci --include=dev
          # Explicitly ensure @types/node is installed
          npm list @types/node || npm install --save-dev @types/node@^20

      - name: Verify TypeScript setup
        run: |
          if [ ! -d "node_modules/@types/node" ]; then
            echo "Installing missing @types/node..."
            npm install --save-dev @types/node@^20
          fi

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: false

      - name: Check Prisma schema
        run: npx prisma validate

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    env:
      NODE_ENV: production
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /dashboard
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /dashboard
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Temporarily disable npm cache to avoid dependency issues

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm ci --include=dev
          npm list @types/node || npm install --save-dev @types/node@^20

      - name: Verify TypeScript setup
        run: |
          if [ ! -d "node_modules/@types/node" ]; then
            echo "Installing missing @types/node..."
            npm install --save-dev @types/node@^20
          fi

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: |
          echo "Starting Next.js build..."
          npm run build
          echo "Build completed successfully"
        env:
          CI: true
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/

  # Deploy to Vercel (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deploy to Vercel (Staging/Development)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel (Staging)
        run: vercel --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.event_name == 'pull_request'
    environment: preview
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel (Preview)
        run: vercel --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Database Migration (Production only)
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}